type Notification implements BasicObject {
    id: ID! # internal_id
    standard_id: String!
    entity_type: String!
    parent_types: [String]!
    messages: [String!]!
    is_read: Boolean!
    # NotificationTrigger
}

# Ordering
enum NotificationsOrdering {
    created
}

# Filtering
enum NotificationFilter {
    created
}
input NotificationsFiltering {
    key: [NotificationFilter!]!
    values: [String]
    operator: String
    filterMode: FilterMode
}

# Relay connections
type NotificationConnection {
    pageInfo: PageInfo!
    edges: [NotificationEdge]
}
type NotificationEdge {
    cursor: String!
    node: Notification!
}

# Queries
type Query {
    notification(id: String!): Notification @auth
    notifications(
        first: Int
        after: ID
        orderBy: NotificationsOrdering
        orderMode: OrderingMode
        filters: [NotificationsFiltering!]
        filterMode: FilterMode
        search: String
    ): NotificationConnection @auth
}

# Mutations
type Mutation {
    notificationDelete(id: ID!): ID @auth
    notificationMarkRead(id: ID!, read: Boolean!): Notification @auth
}

# Subscriptions
type Subscription {
    notification: Notification @auth
}
